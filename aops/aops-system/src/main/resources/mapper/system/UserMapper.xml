<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.odboy.core.dal.mysql.system.UserMapper">
    <resultMap id="BaseResultMap" type="cn.odboy.core.dal.dataobject.system.UserDO">
        <id column="user_user_id" property="id"/>
        <result column="user_dept_id" property="deptId"/>
        <result column="user_username" property="username"/>
        <result column="user_nick_name" property="nickName"/>
        <result column="user_email" property="email"/>
        <result column="user_phone" property="phone"/>
        <result column="user_gender" property="gender"/>
        <result column="user_avatar_name" property="avatarName"/>
        <result column="user_avatar_path" property="avatarPath"/>
        <result column="user_password" property="password"/>
        <result column="user_is_admin" property="isAdmin"/>
        <result column="user_enabled" property="enabled"/>
        <result column="user_pwd_reset_time" property="pwdResetTime"/>
        <result column="user_create_by" property="createBy"/>
        <result column="user_update_by" property="updateBy"/>
        <result column="user_create_time" property="createTime"/>
        <result column="user_update_time" property="updateTime"/>
        <association property="dept" javaType="cn.odboy.core.dal.dataobject.system.DeptDO">
            <id column="dept_id" property="id"/>
            <result column="dept_name" property="name"/>
        </association>
        <collection property="jobs" ofType="cn.odboy.core.dal.dataobject.system.JobDO">
            <id column="job_id" property="id"/>
            <result column="job_name" property="name"/>
        </collection>
        <collection property="roles" ofType="cn.odboy.core.dal.dataobject.system.RoleDO">
            <id column="role_id" property="id"/>
            <result column="role_name" property="name"/>
            <result column="role_level" property="level"/>
            <result column="role_data_scope" property="dataScope"/>
        </collection>
    </resultMap>
    <select id="getUserCountByArgs" resultType="java.lang.Long">
        select count(*)
        from system_user u
        <where>
            <if test="args.id != null">
                and u.user_id = #{args.id}
            </if>
            <if test="args.enabled != null">
                and u.enabled = #{args.enabled}
            </if>
            <if test="args.deptIds != null and args.deptIds.size() != 0">
                and u.dept_id in
                <foreach collection="args.deptIds" item="deptId" open="(" separator="," close=")">
                    #{deptId}
                </foreach>
            </if>
            <if test="args.blurry != null and args.blurry != ''">
                and (
                u.username like concat('%', #{args.blurry}, '%')
                or u.nick_name like concat('%', #{args.blurry}, '%')
                or u.email like concat('%', #{args.blurry}, '%')
                )
            </if>
            <if test="args.createTime != null and args.createTime.size() != 0">
                and u.create_time between #{args.createTime[0]} and #{args.createTime[1]}
            </if>
        </where>
    </select>
    <select id="queryUserPageByArgs" resultMap="BaseResultMap">
        select u.*,
        j.id as job_id, j.name as job_name,
        r.role_id as role_id, r.name as role_name, r.level as role_level, r.data_scope as role_data_scope
        from (
        select
        u.user_id as user_user_id, u.dept_id as user_dept_id, u.username as user_username,
        u.nick_name as user_nick_name, u.email as user_email, u.phone as user_phone,
        u.gender as user_gender, u.avatar_name as user_avatar_name, u.avatar_path as user_avatar_path,
        u.enabled as user_enabled, u.pwd_reset_time as user_pwd_reset_time, u.create_by as user_create_by,
        u.update_by as user_update_by, u.create_time as user_create_time, u.update_time as user_update_time,
        d.dept_id as dept_id, d.name as dept_name
        from system_user u
        left join system_dept d on u.dept_id = d.dept_id
        <where>
            <if test="args.id != null">
                and u.user_id = #{args.id}
            </if>
            <if test="args.enabled != null">
                and u.enabled = #{args.enabled}
            </if>
            <if test="args.deptIds != null and args.deptIds.size() != 0">
                and u.dept_id in
                <foreach collection="args.deptIds" item="deptId" open="(" separator="," close=")">
                    #{deptId}
                </foreach>
            </if>
            <if test="args.blurry != null and args.blurry != ''">
                and (
                u.username like concat('%', #{args.blurry}, '%')
                or u.nick_name like concat('%', #{args.blurry}, '%')
                or u.email like concat('%', #{args.blurry}, '%')
                )
            </if>
            <if test="args.createTime != null and args.createTime.size() != 0">
                and u.create_time between #{args.createTime[0]} and #{args.createTime[1]}
            </if>
        </where>
        order by u.user_id desc
        <if test="args.offset != null">
            limit #{args.offset}, #{args.size}
        </if>
        ) u
        left join system_users_jobs suj on u.user_user_id = suj.user_id
        left join system_job j on suj.job_id = j.id
        left join system_users_roles sur on u.user_user_id = sur.user_id
        left join system_role r on sur.role_id = r.role_id
        order by u.user_user_id desc
    </select>
    <select id="getUserByUsername" resultMap="BaseResultMap">
        select u.password          user_password,
               u.is_admin          user_is_admin,
               u.user_id        as user_user_id,
               u.dept_id        as user_dept_id,
               u.username       as user_username,
               u.nick_name      as user_nick_name,
               u.email          as user_email,
               u.phone          as user_phone,
               u.gender         as user_gender,
               u.avatar_name    as user_avatar_name,
               u.avatar_path    as user_avatar_path,
               u.enabled        as user_enabled,
               u.pwd_reset_time as user_pwd_reset_time,
               u.create_by      as user_create_by,
               u.update_by      as user_update_by,
               u.create_time    as user_create_time,
               u.update_time    as user_update_time,
               d.dept_id        as dept_id,
               d.name           as dept_name
        from system_user u
                 left join system_dept d on u.dept_id = d.dept_id
        where u.username = #{username}
    </select>
    <select id="getUserByEmail" resultType="cn.odboy.core.dal.dataobject.system.UserDO">
        select user_id as id, username
        from system_user
        where email = #{email}
    </select>
    <select id="getUserByPhone" resultType="cn.odboy.core.dal.dataobject.system.UserDO">
        select user_id as id, username
        from system_user
        where phone = #{phone}
    </select>
    <update id="updatePasswordByUsername">
        update system_user
        set password       = #{password},
            pwd_reset_time = #{lastPasswordResetTime}
        where username = #{username}
    </update>
    <update id="updateEmailByUsername">
        update system_user
        set email = #{email}
        where username = #{username}
    </update>
    <select id="queryUserListByRoleId" resultType="cn.odboy.core.dal.dataobject.system.UserDO">
        SELECT u.user_id as id, u.username
        FROM system_user u,
             system_users_roles r
        WHERE u.user_id = r.user_id
          AND r.role_id = #{roleId}
        group by u.user_id
    </select>
    <select id="queryUserListByDeptId" resultType="cn.odboy.core.dal.dataobject.system.UserDO">
        SELECT u.*
        FROM system_user u,
             system_users_roles r,
             system_roles_depts d
        WHERE u.user_id = r.user_id
          AND r.role_id = d.role_id
          AND d.dept_id = #{deptId}
        group by u.user_id
    </select>
    <select id="queryUserListByMenuId" resultType="cn.odboy.core.dal.dataobject.system.UserDO">
        SELECT u.user_id as id, u.username
        FROM system_user u,
             system_users_roles ur,
             system_roles_menus rm
        WHERE u.user_id = ur.user_id
          AND ur.role_id = rm.role_id
          AND rm.menu_id = #{menuId}
        group by u.user_id
    </select>
    <select id="getUserCountByJobIds" resultType="int">
        SELECT count(*) FROM system_user u, system_users_jobs j
        WHERE u.user_id = j.user_id AND j.job_id IN
        <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
            #{jobId}
        </foreach>
    </select>
    <select id="getUserCountByDeptIds" resultType="int">
        SELECT count(*) FROM system_user u
        WHERE u.dept_id IN
        <foreach collection="deptIds" item="deptId" open="(" separator="," close=")">
            #{deptId}
        </foreach>
    </select>
    <select id="getUserCountByRoleIds" resultType="int">
        SELECT count(*) FROM system_user u, system_users_roles r
        WHERE u.user_id = r.user_id AND r.role_id in
        <foreach collection="roleIds" item="roleId" open="(" separator="," close=")">
            #{roleId}
        </foreach>
    </select>
    <update id="updatePasswordByUserIds">
        update system_user set password = #{password}
        where user_id in
        <foreach collection="userIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>